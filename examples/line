import cv2 as cv
from robomaster import robot
import numpy as np
import time

def sub_data_handler(sub_info):
    global distance
    distance = sub_info


def find_line():
    img = ep_camera.read_cv2_image(strategy="newest")
    img = img [180:410, 320:960]
    hsv = cv.cvtColor(img, cv.COLOR_BGR2HSV)
    mask = cv.inRange(hsv, (25,175, 25), (35, 255, 255))
    cropped_image = mask

    # heightframe, widthframe = mask.shape
    height, width = cropped_image.shape
    print(height,width)
    

    top = 0
    bottom = 0
    # quater1 = 0
    # quater2 = 0


    for i in range(width - 1):
        if (mask[int(height/2)][i] == 0 and mask[int(height/2)][i + 1] == 255) or (
            mask[int(height/2)][i] == 255 and mask[int(height/2)][i + 1] == 0
        ):
            top = top + i

        if (mask[height - 1][i] == 0 and mask[height - 1][i + 1] == 255) or (
            mask[height - 1][i] == 255 and mask[height - 1][i + 1] == 0
        ):
            bottom = bottom + i

    y = int(height/2) + (height - 1)
    x = int((top / 2) - (bottom / 2))
    if x != 0:
        m = y / x
    else:
        m = 10000
    print(m)

    c = -int(top / 2)

    height_center = int(height / 2)
    # width_center = int(width / 2)
    center_line = int((-height_center / m) - c)

    cv.line(img, (int(top/2), int(int(height/2))), (int(bottom/2), height-1), (255, 0, 0), 5)
    # center = cv.circle(img, (width_center, height_center), 5, (0, 0, 0), -1)
    cv.circle(img, (center_line, height_center), 5, (255, 0, 0), -1)
    # print(mask.shape)
    # time.sleep(0.5)
    

    

    speed = 15
    speed2 = 30
    speed3 = 20
    slp = 0.1
    
    if center_line < 290:
        ep_chassis.drive_wheels(w1=speed, w2=-speed, w3=-speed, w4=speed)
        time.sleep(slp)
    elif center_line > 350:
        ep_chassis.drive_wheels(w1=-speed, w2=speed, w3=speed, w4=-speed)
        time.sleep(slp)
    elif center_line >= 290 and center_line <= 350:
        # ep_chassis.drive_wheels(w1=0.25, w2=0.25, w3=0.25, w4=0.25)
        ep_chassis.drive_wheels(w1=speed2, w2=speed2, w3=speed2, w4=speed2)
        time.sleep(slp)
    
    if m>=-6 and m<=6 : 
        if m>0:
            #ซ้าย
            ep_chassis.drive_wheels(w1=0, w2=speed3, w3=speed3, w4=-speed3)
            time.sleep(slp)
        else:
            #ขวา
            ep_chassis.drive_wheels(w1=speed3, w2=0, w3=-speed3, w4=speed3)
            time.sleep(slp)



        #     ep_chassis.move(x=0, y=0, z=15, z_speed=speed).wait_for_completed()
        #     time.sleep(1)
        # elif m>2:
        #     ep_chassis.move(x=0, y=0, z=-15, z_speed=speed).wait_for_completed()
        #     time.sleep(1)
        # else : 
        #  ep_chassis.move(x=0, y=0, z=20, z_speed=speed).wait_for_completed()
        #  time.sleep(0.5)
        #elif m>1.5:
            #ep_chassis.move(x=0, y=0, z=10, z_speed=15).wait_for_completed()
        #elif m >= -1.5 and m <= 1.5:
            #ep_chassis.move(x=0.1, y=0, z=0, x_speed=15).wait_for_completed()

        # elif m<2 :
        #     ep_chassis.move(x=0, y=0, z=20, z_speed=15).wait_for_completed()
        # elif m>10000 and m<2:
        #     ep_chassis.move(x=0.1, y=0, z=0, xy_speed=speed).wait_for_completed()
    #print(m)


        # elif m == 10000:
        #  ep_chassis.move(x=0.1, y=0, z=-20, x_speed=speed).wait_for_completed()   
    # if m <5 :
    #     ep_chassis.move(x=0, y=0, z=-20, z_speed=15).wait_for_completed()
    # elif m :
    #     ep_chassis.move(x=0, y=0, z=-20, z_speed=45).wait_for_completed()
    

        #if center_line < 290:
            #ep_chassis.move(x=1, y=0, z=45, zx_speed=1).wait_for_completed()
        
        # if  m < 5000:
        # ep_chassis.move(x=0, y=-0, z=60, z_speed=20).wait_for_completed()
        #     ep_chassis.drive_wheels(w1=0, w2=speed, w3=0, w4=speed)
        #     time.sleep(slp)
        #     ep_chassis.drive_wheels(w1=0, w2=0, w3=0, w4=0)
        #     time.sleep(slp)
    # elif center_line < 310:
    


    # if center_line < width_center:
    #     print('left')
    # else:
    #     print('right')
    cv.imshow("image line", mask)
    cv.imshow("cropped",img)


if __name__ == "__main__":
    ep_robot = robot.Robot()
    ep_robot.initialize(conn_type="ap")
    ep_camera = ep_robot.camera
    ep_chassis = ep_robot.chassis
    ep_camera.start_video_stream(display=False)
    ep_sensor = ep_robot.sensor
    ep_sensor.sub_distance(freq=5, callback=sub_data_handler)
    time.sleep(3)
    # ep_chassis.move(x=0, y=0.05, z=0, xy_speed=1).wait_for_completed()
    while True:

        find_line()
        # break
        if cv.waitKey(1) & 0xFF == ord("q"):
            break
    cv.destroyAllWindows()
    ep_sensor.unsub_distance()
    ep_camera.stop_video_stream()
    ep_robot.close()









